---
description:
globs:
alwaysApply: false
---
# Vue组件调试最佳实践

## 组件通信调试

### $refs引用调试
当使用`$refs`访问子组件或DOM元素时：

```javascript
// 在mounted钩子中验证所有refs
mounted() {
  console.log('Available refs:', Object.keys(this.$refs));
  console.log('VirtualTable ref:', this.$refs.virtualTable);
  console.log('ScrollContainer ref:', this.$refs.scrollContainer);
}
```

### 事件传递调试
对于自定义事件，确保事件名称和payload格式正确：

```javascript
// 子组件触发事件
this.$emit('scroll', {
  scrollTop: this.scrollTop,
  startIndex: this.startIndex,
  endIndex: this.endIndex
});

// 父组件接收事件
handleVirtualTableScroll(scrollEventData) {
  console.log('收到滚动事件:', scrollEventData);
  // 确保payload结构正确
  if (scrollEventData && typeof scrollEventData.scrollTop === 'number') {
    // 处理逻辑
  }
}
```

## DOM元素查找技巧

### 使用浏览器开发者工具
1. 在Elements面板中找到目标组件的根元素
2. 右键 → "Store as global variable" 得到临时变量$temp0
3. 在Console中执行：`$temp0.querySelector('.table-body')`
4. 验证选择器是否正确找到滚动元素

### 动态检查DOM结构
```javascript
// 在组件方法中检查DOM结构
checkDOMStructure() {
  const container = this.$refs.virtualTable?.$el;
  if (container) {
    console.log('容器类名:', container.className);
    console.log('子元素:', Array.from(container.children).map(child => ({
      tagName: child.tagName,
      className: child.className,
      hasScroll: child.scrollHeight > child.clientHeight
    })));
  }
}
```

## 常见Vue调试陷阱

### 1. 响应式数据更新时机
```javascript
// 错误：立即访问DOM，此时DOM可能还未更新
this.someData = newValue;
const element = this.$refs.someElement;
console.log(element.scrollTop); // 可能是旧值

// 正确：使用$nextTick等待DOM更新
this.someData = newValue;
this.$nextTick(() => {
  const element = this.$refs.someElement;
  console.log(element.scrollTop); // 正确的新值
});
```

### 2. 组件生命周期时机
```javascript
// 错误：在created中访问$refs
created() {
  console.log(this.$refs.someElement); // undefined，DOM还未创建
}

// 正确：在mounted中访问$refs
mounted() {
  console.log(this.$refs.someElement); // 可以正常访问
}
```

### 3. 事件处理中的this绑定
```javascript
// 错误：箭头函数外部的this可能不是组件实例
mounted() {
  document.addEventListener('scroll', function() {
    console.log(this); // 可能是document而不是Vue组件
  });
}

// 正确：使用箭头函数保持this绑定
mounted() {
  document.addEventListener('scroll', () => {
    console.log(this); // Vue组件实例
  });
}
```

## 性能调试技巧

### 使用Performance API监控
```javascript
// 监控方法执行时间
handleScroll(event) {
  const start = performance.now();

  // 滚动处理逻辑
  this.syncScrollPosition(event);

  const end = performance.now();
  if (end - start > 16) { // 超过一帧时间(16ms)
    console.warn(`滚动处理耗时过长: ${end - start}ms`);
  }
}
```

### 避免频繁DOM操作
```javascript
// 错误：频繁读取DOM属性
handleScroll(event) {
  const scrollTop = event.target.scrollTop;
  const scrollLeft = event.target.scrollLeft;
  // 每次都重新查询DOM
  const container = document.querySelector('.scroll-container');
  container.scrollTop = scrollTop;
}

// 正确：缓存DOM引用
mounted() {
  this.cachedScrollContainer = this.$refs.scrollContainer;
},
methods: {
  handleScroll(event) {
    const scrollTop = event.target.scrollTop;
    if (this.cachedScrollContainer) {
      this.cachedScrollContainer.scrollTop = scrollTop;
    }
  }
}
```

## 调试工具推荐

### Vue DevTools
- 使用Components面板查看组件层级和props/data
- 使用Events面板监控自定义事件
- 使用Performance面板分析组件渲染性能

### Console调试技巧
```javascript
// 条件断点
if (this.debugMode) {
  debugger;
}

// 分组日志
console.group('滚动同步调试');
console.log('左侧scrollTop:', leftScrollTop);
console.log('右侧scrollTop:', rightScrollTop);
console.groupEnd();

// 表格形式展示数据
console.table({
  左侧位置: { scrollTop: leftScrollTop, scrollLeft: leftScrollLeft },
  右侧位置: { scrollTop: rightScrollTop, scrollLeft: rightScrollLeft }
});
```

## 错误处理模式

### 防御性编程
```javascript
// 安全的属性访问
const scrollTop = event?.target?.scrollTop ?? 0;
const container = this.$refs?.scrollContainer;

// 类型检查
if (container && typeof container.scrollTo === 'function') {
  container.scrollTo({ top: scrollTop });
}

// 边界值检查
const safeScrollTop = Math.max(0, Math.min(scrollTop, maxScrollTop));
```

### 错误边界处理
```javascript
handleScroll(event) {
  try {
    this.syncScrollPosition(event);
  } catch (error) {
    console.error('滚动同步失败:', error);
    // 回退方案或用户提示
    this.$message?.error('滚动同步出现问题，请刷新页面');
  }
}
```
